/*
LICENCIA JOSE JAVIER BO
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
Lista de paquetes:
 */
package ud1_extra1.gui.ventanas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableRowSorter;
import ud1_extra1.gui.tablemodels.ArchivosTableModel;
import ud1_extra1.logica.Logica;

/**
 * Ventana principal
 *
 * @author Jose Javier BO
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    //sorter de la tabla
    TableRowSorter<ArchivosTableModel> rowSorter;

    /**
     * Creates new form NewJFrame
     */
    public VentanaPrincipal() {
        initComponents();
        //inicializa la tabla
        inicializaTabla();
        //poner foco en el campo de texto de ruta
        inputDirectorio.requestFocus();
    }

    /**
     * Inicializa la tabla estableciendo el modelo y el RowSorter
     */
    private void inicializaTabla() {

        ArchivosTableModel tm = new ArchivosTableModel(Logica.listaArchivos);
        tabla.setModel(tm);
        //definir la tabla como seleccionable
        tabla.setRowSelectionAllowed(false);

        //crear sorter
        rowSorter = new TableRowSorter<>(tm);
        tabla.setRowSorter(rowSorter);

        //ordenacion por defecto inicial
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        rowSorter.setSortKeys(sortKeys);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbDirectorio = new javax.swing.JLabel();
        inputDirectorio = new javax.swing.JTextField();
        btnDirectorio = new javax.swing.JButton();
        lbExtension = new javax.swing.JLabel();
        inputExtension = new javax.swing.JTextField();
        btnExtension = new javax.swing.JButton();
        lbFiltraNombre = new javax.swing.JLabel();
        inputFiltroNombre = new javax.swing.JTextField();
        btnLimpiarFiltro = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbDirectorio.setText("Indique directorio:");

        btnDirectorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ud1_extra1/gui/imagenes/buscar.png"))); // NOI18N
        btnDirectorio.setText("Buscar todo");
        btnDirectorio.setToolTipText("Mostrar todos los archivos de la ruta especificada");
        btnDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorioActionPerformed(evt);
            }
        });

        lbExtension.setText("Indique extension:");

        btnExtension.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ud1_extra1/gui/imagenes/buscar.png"))); // NOI18N
        btnExtension.setText("Buscar con extensión");
        btnExtension.setToolTipText("Mostrar archivos de la ruta especificada que tengan la extension especificada.");
        btnExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtensionActionPerformed(evt);
            }
        });

        lbFiltraNombre.setText("Filtrar nombre:");

        inputFiltroNombre.setToolTipText("Filtrar el contenido de la tabla por el nombre");
        inputFiltroNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputFiltroNombreKeyReleased(evt);
            }
        });

        btnLimpiarFiltro.setText("X");
        btnLimpiarFiltro.setToolTipText("Limpiar el filtro");
        btnLimpiarFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFiltroActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbDirectorio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDirectorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbExtension)
                            .addComponent(lbFiltraNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputExtension, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(inputFiltroNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnExtension, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLimpiarFiltro)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbDirectorio)
                            .addComponent(inputDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbExtension)
                            .addComponent(inputExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbFiltraNombre)
                    .addComponent(btnLimpiarFiltro))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento del boton de buscar todo
     *
     * @param evt
     */
    private void btnDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorioActionPerformed
        String ruta = inputDirectorio.getText();
        //si la ruta esta vacia avisar
        if (ruta.length() == 0) {
            msgError("Escriba una ruta");
        } //si la ruta no existe o no es un directorio avisar
        else if (!Logica.existeDirectorio(ruta)) {
            msgError("No existe un directorio con la ruta: " + ruta);
        } else {
            //ordenar a la Logica buscar los archivos de la ruta y actualizar la tabla
            Logica.buscarSinFiltro(ruta);
            actualizarTabla();
        }

    }//GEN-LAST:event_btnDirectorioActionPerformed

    /**
     * Evento del boton de buscar con extension
     *
     * @param evt
     */
    private void btnExtensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtensionActionPerformed
        String ruta = inputDirectorio.getText();
        String extension = inputExtension.getText();
        //si la ruta esta vacia avisar
        if (ruta.length() == 0) {
            msgError("Escriba una ruta");

            //si la extension esta vacia avisar
        } else if (extension.length() == 0) {
            msgError("Escriba una extension");
        } else if (!Logica.existeDirectorio(ruta)) {
            //si el directorio no existe avisar
            msgError("No existe un directorio con la ruta: " + ruta);
        } else {
            //ordenar a la logica buscar con el filtro de extension y actualizar la tabla
            Logica.buscarConFiltro(ruta, extension);
            actualizarTabla();
        }
    }//GEN-LAST:event_btnExtensionActionPerformed

    /**
     * Refresca el contenido de la tabla
     */
    private void actualizarTabla() {
        ((ArchivosTableModel) tabla.getModel()).fireTableDataChanged();
    }

    /**
     * Muestra un mensaje de error
     * @param msg  El mensaje a mostrar
     */
    private void msgError(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Evento de escribir en el filtro por nombre
     * @param evt 
     */
    private void inputFiltroNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFiltroNombreKeyReleased
        //activar el filtro de nombre
        filtrarPorNombre();
    }//GEN-LAST:event_inputFiltroNombreKeyReleased
 
    /**
     * Filtra la tabla segun el nombre del archivo
     */
    private void filtrarPorNombre() {
        int indiceFiltro = 0; //Ya que es el del nombre
        RowFilter<ArchivosTableModel, Integer> rf = RowFilter.regexFilter(inputFiltroNombre.getText(), indiceFiltro);
        rowSorter.setRowFilter(rf);

    }
    
    /**
     * Boton de limpiar el filtro por nombre
     * @param evt 
     */
    private void btnLimpiarFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFiltroActionPerformed
        //limpiar el filtro de nombre
        inputFiltroNombre.setText("");
        filtrarPorNombre();
    }//GEN-LAST:event_btnLimpiarFiltroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDirectorio;
    private javax.swing.JButton btnExtension;
    private javax.swing.JButton btnLimpiarFiltro;
    private javax.swing.JTextField inputDirectorio;
    private javax.swing.JTextField inputExtension;
    private javax.swing.JTextField inputFiltroNombre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDirectorio;
    private javax.swing.JLabel lbExtension;
    private javax.swing.JLabel lbFiltraNombre;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
